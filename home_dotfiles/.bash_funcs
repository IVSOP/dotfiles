#!/bin/bash

function setup_code() {
    # assume workspace is the focused workspace
    WORKSPACE_ID=$(swaymsg -t get_workspaces | jq '.[] | select(.focused == true) | .id')

	swaymsg split horizontal

	code .

    # wait for vscode to show up
    while ! swaymsg -t get_workspaces | jq --argjson id "$WORKSPACE_ID" '.[] | select(.id == $id) | .representation' | grep -i code; do
        sleep 1
    done

    # TODO: focus vscode instead???
    # TODO: how to run these commands specifically on the current workspace, since I have its ID

	swaymsg move left, resize grow width 0 px or 15 ppt
	swaymsg focus prev # focus back to the terminal
	
	swaymsg split vertical
	clear
}

# first arg name of output, other names are list of files to compress
function compress() {
    if [ "$#" -lt 2 ]
    then
        echo "Not enough args: {OUTPUT} [FILENAMES]"
        echo "Command used is tar -cf - [FILENAMES] | pv -s \$(du -bc [FILENAMES] | tail -n 1 | cut -f 1) | zstd -10 --long --threads=0 --stdout > {OUTPUT}"
        return 1
    fi
    tar -cf - "${@:2}" | pv -s $(du -bc "${@:2}" | tail -n 1 | cut -f 1) | zstd -10 --long --threads=0 --stdout > "$1"
}

function decompress() {
    if [ "$#" -lt 1 ]
    then
        echo "Not enough args"
        return 1
    fi
    local decompressed_size=$(zstd -l -v "$1" 2>/dev/null | grep Compressed | cut -d ' ' -f5 | cut -d \( -f2)
    zstd --decompress --threads=0 "$1" --stdout | pv -s $decompressed_size | tar -x -f -
}

function warp() {
    if [ "$#" -lt 1 ]
    then
        echo "Not enough args"
        return 1
    fi

    sudo systemctl $1 warp-svc.service
}

# screenshot copy
function sc() {
    wl-copy --type image/png < "$HOME/Pictures/Screenshots/$(\ls ~/Pictures/Screenshots | tail -n 1)"
}

# screenshot delete
function sd() {
    local image_path
    image_path="$HOME/Pictures/Screenshots/$(\ls -t "$HOME/Pictures/Screenshots" | head -n 1)"

    chafa $image_path # --size=x$(( $(tput lines) / 2 )) $IMAGE_PATH

    if gum confirm "Remove $(basename "$image_path")?"
    then
        rm -v -- "$image_path"
    else
        echo "Not deleting"
    fi
}

# open nemo
function files() {
    nemo $1 &> /dev/null & disown
}

# get file from downloads
function dl() {
    local src
    if [ $# -gt 0 ]; then
        src=~/Downloads/"$1"
    else
        file=$(eza --sort oldest ~/Downloads | fzf --multi --ansi | tr -d "'")
        [ -z "$file" ] && return 1
        src=~/Downloads/"$file"
    fi
    mv "$src" .
}

# this assumes input is a single file, idc
function encrypt() {
    if [ "$#" -lt 1 ]
    then
        echo "Not enough args: {INPUT}. Output will be a .age"
        return 1
    fi

    local filename="$1"
    local output="${filename}.age"

    age --passphrase --output $output $filename
}

function decrypt() {
    if [ "$#" -lt 1 ]
    then
        echo "Not enough args: {INPUT}. Output is generated automatically"
        return 1
    fi

    local filename="$1"
    local result_filename

    # if name ends in .age, remove the .age extension from the output
    if [[ "$filename" =~ \.age$ ]]; then
        result_filename="${filename%.age}"
    else
        result_filename="$filename"
    fi

    age --decrypt --output $result_filename "$1"
}

function compress-encrypt() {
    if [ "$#" -lt 2 ]
    then
        echo "Not enough args: {OUTPUT (.tar.zst.age)} [FILENAMES]"
        return 1
    fi
    tar -cf - "${@:2}" \
        | zstd -10 --long --threads=0 --stdout \
        | age --passphrase --output "$1"
}

function decompress-decrypt() {
    if [ "$#" -lt 1 ]
    then
        echo "Not enough args"
        return 1
    fi
    age --decrypt --output - "$1" \
        | zstd --decompress --threads=0 - --stdout \
        | tar -x -f -
}

